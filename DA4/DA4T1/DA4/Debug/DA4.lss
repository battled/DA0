
DA4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001a2  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000097b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000009aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000227  00000000  00000000  000009ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000e6  00000000  00000000  00000bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001b4  00000000  00000000  00000cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00000e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000111  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f5  00000000  00000000  00000fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000011c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>
#include <avr/io.h>
#define DEL 5

int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <main+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x8>
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
	//configure timer0; set up fast pwm TOP = OCRA;
	//inverting mode OC0B (set on match, clear at BOTTOM)
	//use OCRA for frequency changes, OCRB for duty cycle
	TCCR0A = (0<<COM0A1)|(0<<COM0A0)|(1<<COM0B1)|(1<<COM0B0)|(1<<WGM01) | (1<<WGM00);
  8c:	83 e3       	ldi	r24, 0x33	; 51
  8e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (0<<FOC0A )|(0<<FOC0B) |(1<<WGM02) |(0<<CS02)  |(0<<CS01)  | (1<<CS00);
  90:	99 e0       	ldi	r25, 0x09	; 9
  92:	95 bd       	out	0x25, r25	; 37
	//configure timer1
	TCCR1A = (0<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(1<<COM1B0)|(1<<WGM11)|(1<<WGM10);
  94:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = (0<<ICNC1) |(0<<ICES1) |(1<<WGM13) |(1<<WGM12) |(0<<CS12) |(0<< CS11)|(1<<CS10);
  98:	29 e1       	ldi	r18, 0x19	; 25
  9a:	20 93 81 00 	sts	0x0081, r18
	//configure timer2
	TCCR2A = (0<<COM2A1)|(0<<COM2A0)|(1<<COM2B1)|(1<<COM2B0)|(1<<WGM21) | (1<<WGM20);
  9e:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = (0<<FOC2A )|(0<<FOC2B) |(1<<WGM22) |(0<<CS22)  |(0<<CS21)  | (1<<CS20);	
  a2:	90 93 b1 00 	sts	0x00B1, r25
	DDRB=0XFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	84 b9       	out	0x04, r24	; 4
	DDRD=0xFF;
  aa:	8a b9       	out	0x0a, r24	; 10

    while(1)
    {
	//	_delay_ms(3000);
					
		for (int r_freq=225; r_freq > 25; r_freq -=25)
  ac:	61 ee       	ldi	r22, 0xE1	; 225
  ae:	70 e0       	ldi	r23, 0x00	; 0
		{
			OCR2A = r_freq;
  b0:	0f 2e       	mov	r0, r31
  b2:	f3 eb       	ldi	r31, 0xB3	; 179
  b4:	2f 2e       	mov	r2, r31
  b6:	31 2c       	mov	r3, r1
  b8:	f0 2d       	mov	r31, r0
			for (int b_freq=225; b_freq > 25; b_freq -= 25)
  ba:	0f 2e       	mov	r0, r31
  bc:	f1 ee       	ldi	r31, 0xE1	; 225
  be:	ef 2e       	mov	r14, r31
  c0:	f1 2c       	mov	r15, r1
  c2:	f0 2d       	mov	r31, r0
			{
				OCR0A = b_freq;
				for(int g_freq=225; g_freq > 25; g_freq -= 25)
				{
					OCR1A = g_freq;
  c4:	0f 2e       	mov	r0, r31
  c6:	f8 e8       	ldi	r31, 0x88	; 136
  c8:	4f 2e       	mov	r4, r31
  ca:	51 2c       	mov	r5, r1
  cc:	f0 2d       	mov	r31, r0
					for(int g_dc=0; g_dc <= g_freq; g_dc+=15)
					{
						_delay_ms(DEL);
						OCR1B = g_dc;
  ce:	0a e8       	ldi	r16, 0x8A	; 138
  d0:	10 e0       	ldi	r17, 0x00	; 0
						for (int r_dc=0; r_dc <= r_freq;r_dc+=9)
							{
								_delay_ms(DEL);
								OCR2B = r_dc;
  d2:	e4 eb       	ldi	r30, 0xB4	; 180
  d4:	f0 e0       	ldi	r31, 0x00	; 0
								for (int b_dc=0; b_dc <= b_freq; b_dc+=2)
  d6:	c1 2c       	mov	r12, r1
  d8:	d1 2c       	mov	r13, r1
  da:	8c 2c       	mov	r8, r12
  dc:	9d 2c       	mov	r9, r13
		{
			OCR2A = r_freq;
			for (int b_freq=225; b_freq > 25; b_freq -= 25)
			{
				OCR0A = b_freq;
				for(int g_freq=225; g_freq > 25; g_freq -= 25)
  de:	6e 2c       	mov	r6, r14
  e0:	7f 2c       	mov	r7, r15
						OCR1B = g_dc;
						for (int r_dc=0; r_dc <= r_freq;r_dc+=9)
							{
								_delay_ms(DEL);
								OCR2B = r_dc;
								for (int b_dc=0; b_dc <= b_freq; b_dc+=2)
  e2:	ac 2c       	mov	r10, r12
  e4:	bd 2c       	mov	r11, r13
    {
	//	_delay_ms(3000);
					
		for (int r_freq=225; r_freq > 25; r_freq -=25)
		{
			OCR2A = r_freq;
  e6:	d1 01       	movw	r26, r2
  e8:	6c 93       	st	X, r22
			for (int b_freq=225; b_freq > 25; b_freq -= 25)
  ea:	97 01       	movw	r18, r14
			{
				OCR0A = b_freq;
  ec:	27 bd       	out	0x27, r18	; 39
				for(int g_freq=225; g_freq > 25; g_freq -= 25)
  ee:	69 82       	std	Y+1, r6	; 0x01
  f0:	7a 82       	std	Y+2, r7	; 0x02
				{
					OCR1A = g_freq;
  f2:	49 81       	ldd	r20, Y+1	; 0x01
  f4:	5a 81       	ldd	r21, Y+2	; 0x02
  f6:	d2 01       	movw	r26, r4
  f8:	11 96       	adiw	r26, 0x01	; 1
  fa:	5c 93       	st	X, r21
  fc:	4e 93       	st	-X, r20
					for(int g_dc=0; g_dc <= g_freq; g_dc+=15)
  fe:	55 23       	and	r21, r21
 100:	c4 f1       	brlt	.+112    	; 0x172 <main+0xf2>
 102:	dc 82       	std	Y+4, r13	; 0x04
 104:	cb 82       	std	Y+3, r12	; 0x03
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	8f e0       	ldi	r24, 0x0F	; 15
 108:	97 e2       	ldi	r25, 0x27	; 39
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x8a>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x90>
 110:	00 00       	nop
					{
						_delay_ms(DEL);
						OCR1B = g_dc;
 112:	4b 81       	ldd	r20, Y+3	; 0x03
 114:	5c 81       	ldd	r21, Y+4	; 0x04
 116:	d8 01       	movw	r26, r16
 118:	11 96       	adiw	r26, 0x01	; 1
 11a:	5c 93       	st	X, r21
 11c:	4e 93       	st	-X, r20
						for (int r_dc=0; r_dc <= r_freq;r_dc+=9)
 11e:	77 23       	and	r23, r23
 120:	ec f0       	brlt	.+58     	; 0x15c <main+0xdc>
 122:	48 2d       	mov	r20, r8
 124:	59 2d       	mov	r21, r9
 126:	8f e0       	ldi	r24, 0x0F	; 15
 128:	97 e2       	ldi	r25, 0x27	; 39
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0xaa>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0xb0>
 130:	00 00       	nop
							{
								_delay_ms(DEL);
								OCR2B = r_dc;
 132:	40 83       	st	Z, r20
								for (int b_dc=0; b_dc <= b_freq; b_dc+=2)
 134:	33 23       	and	r19, r19
 136:	6c f0       	brlt	.+26     	; 0x152 <main+0xd2>
 138:	8a 2d       	mov	r24, r10
 13a:	9b 2d       	mov	r25, r11
 13c:	af e0       	ldi	r26, 0x0F	; 15
 13e:	b7 e2       	ldi	r27, 0x27	; 39
 140:	11 97       	sbiw	r26, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0xc0>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0xc6>
 146:	00 00       	nop
								{
									_delay_ms(DEL);
									OCR0B = b_dc;
 148:	88 bd       	out	0x28, r24	; 40
						OCR1B = g_dc;
						for (int r_dc=0; r_dc <= r_freq;r_dc+=9)
							{
								_delay_ms(DEL);
								OCR2B = r_dc;
								for (int b_dc=0; b_dc <= b_freq; b_dc+=2)
 14a:	02 96       	adiw	r24, 0x02	; 2
 14c:	28 17       	cp	r18, r24
 14e:	39 07       	cpc	r19, r25
 150:	ac f7       	brge	.-22     	; 0x13c <main+0xbc>
					OCR1A = g_freq;
					for(int g_dc=0; g_dc <= g_freq; g_dc+=15)
					{
						_delay_ms(DEL);
						OCR1B = g_dc;
						for (int r_dc=0; r_dc <= r_freq;r_dc+=9)
 152:	47 5f       	subi	r20, 0xF7	; 247
 154:	5f 4f       	sbci	r21, 0xFF	; 255
 156:	64 17       	cp	r22, r20
 158:	75 07       	cpc	r23, r21
 15a:	2c f7       	brge	.-54     	; 0x126 <main+0xa6>
			{
				OCR0A = b_freq;
				for(int g_freq=225; g_freq > 25; g_freq -= 25)
				{
					OCR1A = g_freq;
					for(int g_dc=0; g_dc <= g_freq; g_dc+=15)
 15c:	4b 81       	ldd	r20, Y+3	; 0x03
 15e:	5c 81       	ldd	r21, Y+4	; 0x04
 160:	41 5f       	subi	r20, 0xF1	; 241
 162:	5f 4f       	sbci	r21, 0xFF	; 255
 164:	5c 83       	std	Y+4, r21	; 0x04
 166:	4b 83       	std	Y+3, r20	; 0x03
 168:	89 81       	ldd	r24, Y+1	; 0x01
 16a:	9a 81       	ldd	r25, Y+2	; 0x02
 16c:	84 17       	cp	r24, r20
 16e:	95 07       	cpc	r25, r21
 170:	54 f6       	brge	.-108    	; 0x106 <main+0x86>
		{
			OCR2A = r_freq;
			for (int b_freq=225; b_freq > 25; b_freq -= 25)
			{
				OCR0A = b_freq;
				for(int g_freq=225; g_freq > 25; g_freq -= 25)
 172:	a9 81       	ldd	r26, Y+1	; 0x01
 174:	ba 81       	ldd	r27, Y+2	; 0x02
 176:	59 97       	sbiw	r26, 0x19	; 25
 178:	ba 83       	std	Y+2, r27	; 0x02
 17a:	a9 83       	std	Y+1, r26	; 0x01
 17c:	59 97       	sbiw	r26, 0x19	; 25
 17e:	09 f0       	breq	.+2      	; 0x182 <main+0x102>
 180:	b8 cf       	rjmp	.-144    	; 0xf2 <main+0x72>
	//	_delay_ms(3000);
					
		for (int r_freq=225; r_freq > 25; r_freq -=25)
		{
			OCR2A = r_freq;
			for (int b_freq=225; b_freq > 25; b_freq -= 25)
 182:	29 51       	subi	r18, 0x19	; 25
 184:	31 09       	sbc	r19, r1
 186:	29 31       	cpi	r18, 0x19	; 25
 188:	31 05       	cpc	r19, r1
 18a:	09 f0       	breq	.+2      	; 0x18e <main+0x10e>
 18c:	af cf       	rjmp	.-162    	; 0xec <main+0x6c>

    while(1)
    {
	//	_delay_ms(3000);
					
		for (int r_freq=225; r_freq > 25; r_freq -=25)
 18e:	69 51       	subi	r22, 0x19	; 25
 190:	71 09       	sbc	r23, r1
 192:	6a 31       	cpi	r22, 0x1A	; 26
 194:	71 05       	cpc	r23, r1
 196:	0c f0       	brlt	.+2      	; 0x19a <main+0x11a>
 198:	a6 cf       	rjmp	.-180    	; 0xe6 <main+0x66>
 19a:	b7 01       	movw	r22, r14
 19c:	a4 cf       	rjmp	.-184    	; 0xe6 <main+0x66>

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
