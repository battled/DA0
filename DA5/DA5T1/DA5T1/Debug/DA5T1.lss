
DA5T1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000f6  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008cf  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000008fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000176  00000000  00000000  0000091e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000e7  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000019d  00000000  00000000  00000b7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000d18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000f3  00000000  00000000  00000d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ce  00000000  00000000  00000e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00000efd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
		int ctr =0; //counter to do software timer
		DDRB = 0XFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
		DDRD = 0XFF;
  84:	8a b9       	out	0x0a, r24	; 10
		ADCSRA = 0X87; //10000111 Enable ADC, divide clock by 128
  86:	87 e8       	ldi	r24, 0x87	; 135
  88:	80 93 7a 00 	sts	0x007A, r24
		ADMUX  = 0X40; //internal 1.1v voltage reference
  8c:	80 e4       	ldi	r24, 0x40	; 64
  8e:	80 93 7c 00 	sts	0x007C, r24
	
		while(1)
		{
			ADCSRA |= (1<< ADSC)|(1<<ADIF); 	//read adc
  92:	ea e7       	ldi	r30, 0x7A	; 122
  94:	f0 e0       	ldi	r31, 0x00	; 0
			while ((ADCSRA & (1<<ADIF)) ==0);   //wait for adc to finish
			ctr = 1024 - ADC;	//set first part of duty cycle
  96:	a8 e7       	ldi	r26, 0x78	; 120
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	20 e0       	ldi	r18, 0x00	; 0
  9c:	34 e0       	ldi	r19, 0x04	; 4
			{
				ctr --;
				_delay_us(10);
			}

			PORTB ^= 0x04;		//flip output bit
  9e:	44 e0       	ldi	r20, 0x04	; 4
		ADCSRA = 0X87; //10000111 Enable ADC, divide clock by 128
		ADMUX  = 0X40; //internal 1.1v voltage reference
	
		while(1)
		{
			ADCSRA |= (1<< ADSC)|(1<<ADIF); 	//read adc
  a0:	80 81       	ld	r24, Z
  a2:	80 65       	ori	r24, 0x50	; 80
  a4:	80 83       	st	Z, r24
			while ((ADCSRA & (1<<ADIF)) ==0);   //wait for adc to finish
  a6:	80 81       	ld	r24, Z
  a8:	84 ff       	sbrs	r24, 4
  aa:	fd cf       	rjmp	.-6      	; 0xa6 <main+0x26>
			ctr = 1024 - ADC;	//set first part of duty cycle
  ac:	8d 91       	ld	r24, X+
  ae:	9c 91       	ld	r25, X
  b0:	11 97       	sbiw	r26, 0x01	; 1
  b2:	b9 01       	movw	r22, r18
  b4:	68 1b       	sub	r22, r24
  b6:	79 0b       	sbc	r23, r25
  b8:	cb 01       	movw	r24, r22
			while (ctr != 0)
  ba:	00 97       	sbiw	r24, 0x00	; 0
  bc:	39 f0       	breq	.+14     	; 0xcc <main+0x4c>
			{
				ctr --;
  be:	01 97       	sbiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	7a e1       	ldi	r23, 0x1A	; 26
  c2:	7a 95       	dec	r23
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x42>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x48>
		while(1)
		{
			ADCSRA |= (1<< ADSC)|(1<<ADIF); 	//read adc
			while ((ADCSRA & (1<<ADIF)) ==0);   //wait for adc to finish
			ctr = 1024 - ADC;	//set first part of duty cycle
			while (ctr != 0)
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	c9 f7       	brne	.-14     	; 0xbe <main+0x3e>
			{
				ctr --;
				_delay_us(10);
			}

			PORTB ^= 0x04;		//flip output bit
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	84 27       	eor	r24, r20
  d0:	85 b9       	out	0x05, r24	; 5
			
			ctr = ADC;			//set second half of duty cycle
  d2:	8d 91       	ld	r24, X+
  d4:	9c 91       	ld	r25, X
  d6:	11 97       	sbiw	r26, 0x01	; 1
			while (ctr != 0)
  d8:	00 97       	sbiw	r24, 0x00	; 0
  da:	39 f0       	breq	.+14     	; 0xea <main+0x6a>
			{
				ctr--;
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	5a e1       	ldi	r21, 0x1A	; 26
  e0:	5a 95       	dec	r21
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x60>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x66>
			}

			PORTB ^= 0x04;		//flip output bit
			
			ctr = ADC;			//set second half of duty cycle
			while (ctr != 0)
  e6:	00 97       	sbiw	r24, 0x00	; 0
  e8:	c9 f7       	brne	.-14     	; 0xdc <main+0x5c>
			{
				ctr--;
				_delay_us(10);	
			}
			PORTB ^= 0X04;		//flip output bit
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	84 27       	eor	r24, r20
  ee:	85 b9       	out	0x05, r24	; 5
		}
  f0:	d7 cf       	rjmp	.-82     	; 0xa0 <main+0x20>

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
