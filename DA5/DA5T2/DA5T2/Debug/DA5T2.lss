
DA5T2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000003b2  00000426  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00001710  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000679  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000021b1  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001cf  00000000  00000000  00002208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000130  00000000  00000000  000023d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001a6  00000000  00000000  00002507  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000026b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000fc  00000000  00000000  00002704  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f1  00000000  00000000  00002800  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000028f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  78:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <my_delay>:
#define F_CPU 8000000UL //XTAL = 8MHZ
#include <avr/io.h>
#include <util/delay.h>

void my_delay(int x)		//delay function
{
  80:	ef 92       	push	r14
  82:	ff 92       	push	r15
  84:	0f 93       	push	r16
  86:	1f 93       	push	r17
  88:	cf 93       	push	r28
  8a:	df 93       	push	r29
	int i;
	for(i= 0; i < x*2.5; i++)
  8c:	bc 01       	movw	r22, r24
  8e:	88 27       	eor	r24, r24
  90:	77 fd       	sbrc	r23, 7
  92:	80 95       	com	r24
  94:	98 2f       	mov	r25, r24
  96:	0e 94 c0 00 	call	0x180	; 0x180 <__floatsisf>
  9a:	20 e0       	ldi	r18, 0x00	; 0
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	40 e2       	ldi	r20, 0x20	; 32
  a0:	50 e4       	ldi	r21, 0x40	; 64
  a2:	0e 94 23 01 	call	0x246	; 0x246 <__mulsf3>
  a6:	16 2f       	mov	r17, r22
  a8:	07 2f       	mov	r16, r23
  aa:	f8 2e       	mov	r15, r24
  ac:	e9 2e       	mov	r14, r25
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	a9 01       	movw	r20, r18
  b4:	0e 94 1f 01 	call	0x23e	; 0x23e <__gesf2>
  b8:	18 16       	cp	r1, r24
  ba:	b4 f4       	brge	.+44     	; 0xe8 <my_delay+0x68>
  bc:	c0 e0       	ldi	r28, 0x00	; 0
  be:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	8a 95       	dec	r24
  c4:	f1 f7       	brne	.-4      	; 0xc2 <my_delay+0x42>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <my_delay+0x48>
  c8:	21 96       	adiw	r28, 0x01	; 1
  ca:	be 01       	movw	r22, r28
  cc:	88 27       	eor	r24, r24
  ce:	77 fd       	sbrc	r23, 7
  d0:	80 95       	com	r24
  d2:	98 2f       	mov	r25, r24
  d4:	0e 94 c0 00 	call	0x180	; 0x180 <__floatsisf>
  d8:	21 2f       	mov	r18, r17
  da:	30 2f       	mov	r19, r16
  dc:	4f 2d       	mov	r20, r15
  de:	5e 2d       	mov	r21, r14
  e0:	0e 94 ba 00 	call	0x174	; 0x174 <__cmpsf2>
  e4:	88 23       	and	r24, r24
  e6:	64 f3       	brlt	.-40     	; 0xc0 <my_delay+0x40>
	{
		_delay_us(1);
	}
}
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	1f 91       	pop	r17
  ee:	0f 91       	pop	r16
  f0:	ff 90       	pop	r15
  f2:	ef 90       	pop	r14
  f4:	08 95       	ret

000000f6 <main>:
int main()
{
	int del;	//dleay
	DDRB = (1<<PB0);//make PB0 an output
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	84 b9       	out	0x04, r24	; 4
	ADCSRA	= 0x80;	//use AREF, internal Vref turned off, ck/2
  fa:	80 e8       	ldi	r24, 0x80	; 128
  fc:	80 93 7a 00 	sts	0x007A, r24
	ADMUX=0;	//ADC single ended input
 100:	10 92 7c 00 	sts	0x007C, r1

	while(1)
	{
		ADCSRA |= (1<<ADSC);			//start conversion
 104:	ca e7       	ldi	r28, 0x7A	; 122
 106:	d0 e0       	ldi	r29, 0x00	; 0
		while((ADCSRA&(1<<ADIF))==0);	//wait for conversion to finish
		del = 1024 - ADC;					//store adc
 108:	0f 2e       	mov	r0, r31
 10a:	f8 e7       	ldi	r31, 0x78	; 120
 10c:	cf 2e       	mov	r12, r31
 10e:	d1 2c       	mov	r13, r1
 110:	f0 2d       	mov	r31, r0
 112:	e1 2c       	mov	r14, r1
 114:	68 94       	set
 116:	ff 24       	eor	r15, r15
 118:	f2 f8       	bld	r15, 2
		PORTB = 0X06;
 11a:	0f 2e       	mov	r0, r31
 11c:	f6 e0       	ldi	r31, 0x06	; 6
 11e:	8f 2e       	mov	r8, r31
 120:	f0 2d       	mov	r31, r0
		my_delay(del);
		PORTB = 0x0A;
 122:	0f 2e       	mov	r0, r31
 124:	fa e0       	ldi	r31, 0x0A	; 10
 126:	9f 2e       	mov	r9, r31
 128:	f0 2d       	mov	r31, r0
		my_delay(del);
		PORTB = 0x09;
 12a:	0f 2e       	mov	r0, r31
 12c:	f9 e0       	ldi	r31, 0x09	; 9
 12e:	af 2e       	mov	r10, r31
 130:	f0 2d       	mov	r31, r0
		my_delay(del);
		PORTB = 0x05;
 132:	0f 2e       	mov	r0, r31
 134:	f5 e0       	ldi	r31, 0x05	; 5
 136:	bf 2e       	mov	r11, r31
 138:	f0 2d       	mov	r31, r0
	ADCSRA	= 0x80;	//use AREF, internal Vref turned off, ck/2
	ADMUX=0;	//ADC single ended input

	while(1)
	{
		ADCSRA |= (1<<ADSC);			//start conversion
 13a:	88 81       	ld	r24, Y
 13c:	80 64       	ori	r24, 0x40	; 64
 13e:	88 83       	st	Y, r24
		while((ADCSRA&(1<<ADIF))==0);	//wait for conversion to finish
 140:	88 81       	ld	r24, Y
 142:	84 ff       	sbrs	r24, 4
 144:	fd cf       	rjmp	.-6      	; 0x140 <main+0x4a>
		del = 1024 - ADC;					//store adc
 146:	f6 01       	movw	r30, r12
 148:	80 81       	ld	r24, Z
 14a:	91 81       	ldd	r25, Z+1	; 0x01
 14c:	87 01       	movw	r16, r14
 14e:	08 1b       	sub	r16, r24
 150:	19 0b       	sbc	r17, r25
		PORTB = 0X06;
 152:	85 b8       	out	0x05, r8	; 5
		my_delay(del);
 154:	c8 01       	movw	r24, r16
 156:	0e 94 40 00 	call	0x80	; 0x80 <my_delay>
		PORTB = 0x0A;
 15a:	95 b8       	out	0x05, r9	; 5
		my_delay(del);
 15c:	c8 01       	movw	r24, r16
 15e:	0e 94 40 00 	call	0x80	; 0x80 <my_delay>
		PORTB = 0x09;
 162:	a5 b8       	out	0x05, r10	; 5
		my_delay(del);
 164:	c8 01       	movw	r24, r16
 166:	0e 94 40 00 	call	0x80	; 0x80 <my_delay>
		PORTB = 0x05;
 16a:	b5 b8       	out	0x05, r11	; 5
		my_delay(del);
 16c:	c8 01       	movw	r24, r16
 16e:	0e 94 40 00 	call	0x80	; 0x80 <my_delay>
	}
 172:	e3 cf       	rjmp	.-58     	; 0x13a <main+0x44>

00000174 <__cmpsf2>:
 174:	40 d0       	rcall	.+128    	; 0x1f6 <__fp_cmp>
 176:	08 f4       	brcc	.+2      	; 0x17a <__cmpsf2+0x6>
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	08 95       	ret

0000017c <__floatunsisf>:
 17c:	e8 94       	clt
 17e:	09 c0       	rjmp	.+18     	; 0x192 <__floatsisf+0x12>

00000180 <__floatsisf>:
 180:	97 fb       	bst	r25, 7
 182:	3e f4       	brtc	.+14     	; 0x192 <__floatsisf+0x12>
 184:	90 95       	com	r25
 186:	80 95       	com	r24
 188:	70 95       	com	r23
 18a:	61 95       	neg	r22
 18c:	7f 4f       	sbci	r23, 0xFF	; 255
 18e:	8f 4f       	sbci	r24, 0xFF	; 255
 190:	9f 4f       	sbci	r25, 0xFF	; 255
 192:	99 23       	and	r25, r25
 194:	a9 f0       	breq	.+42     	; 0x1c0 <__floatsisf+0x40>
 196:	f9 2f       	mov	r31, r25
 198:	96 e9       	ldi	r25, 0x96	; 150
 19a:	bb 27       	eor	r27, r27
 19c:	93 95       	inc	r25
 19e:	f6 95       	lsr	r31
 1a0:	87 95       	ror	r24
 1a2:	77 95       	ror	r23
 1a4:	67 95       	ror	r22
 1a6:	b7 95       	ror	r27
 1a8:	f1 11       	cpse	r31, r1
 1aa:	f8 cf       	rjmp	.-16     	; 0x19c <__floatsisf+0x1c>
 1ac:	fa f4       	brpl	.+62     	; 0x1ec <__floatsisf+0x6c>
 1ae:	bb 0f       	add	r27, r27
 1b0:	11 f4       	brne	.+4      	; 0x1b6 <__floatsisf+0x36>
 1b2:	60 ff       	sbrs	r22, 0
 1b4:	1b c0       	rjmp	.+54     	; 0x1ec <__floatsisf+0x6c>
 1b6:	6f 5f       	subi	r22, 0xFF	; 255
 1b8:	7f 4f       	sbci	r23, 0xFF	; 255
 1ba:	8f 4f       	sbci	r24, 0xFF	; 255
 1bc:	9f 4f       	sbci	r25, 0xFF	; 255
 1be:	16 c0       	rjmp	.+44     	; 0x1ec <__floatsisf+0x6c>
 1c0:	88 23       	and	r24, r24
 1c2:	11 f0       	breq	.+4      	; 0x1c8 <__floatsisf+0x48>
 1c4:	96 e9       	ldi	r25, 0x96	; 150
 1c6:	11 c0       	rjmp	.+34     	; 0x1ea <__floatsisf+0x6a>
 1c8:	77 23       	and	r23, r23
 1ca:	21 f0       	breq	.+8      	; 0x1d4 <__floatsisf+0x54>
 1cc:	9e e8       	ldi	r25, 0x8E	; 142
 1ce:	87 2f       	mov	r24, r23
 1d0:	76 2f       	mov	r23, r22
 1d2:	05 c0       	rjmp	.+10     	; 0x1de <__floatsisf+0x5e>
 1d4:	66 23       	and	r22, r22
 1d6:	71 f0       	breq	.+28     	; 0x1f4 <__floatsisf+0x74>
 1d8:	96 e8       	ldi	r25, 0x86	; 134
 1da:	86 2f       	mov	r24, r22
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	2a f0       	brmi	.+10     	; 0x1ec <__floatsisf+0x6c>
 1e2:	9a 95       	dec	r25
 1e4:	66 0f       	add	r22, r22
 1e6:	77 1f       	adc	r23, r23
 1e8:	88 1f       	adc	r24, r24
 1ea:	da f7       	brpl	.-10     	; 0x1e2 <__floatsisf+0x62>
 1ec:	88 0f       	add	r24, r24
 1ee:	96 95       	lsr	r25
 1f0:	87 95       	ror	r24
 1f2:	97 f9       	bld	r25, 7
 1f4:	08 95       	ret

000001f6 <__fp_cmp>:
 1f6:	99 0f       	add	r25, r25
 1f8:	00 08       	sbc	r0, r0
 1fa:	55 0f       	add	r21, r21
 1fc:	aa 0b       	sbc	r26, r26
 1fe:	e0 e8       	ldi	r30, 0x80	; 128
 200:	fe ef       	ldi	r31, 0xFE	; 254
 202:	16 16       	cp	r1, r22
 204:	17 06       	cpc	r1, r23
 206:	e8 07       	cpc	r30, r24
 208:	f9 07       	cpc	r31, r25
 20a:	c0 f0       	brcs	.+48     	; 0x23c <__fp_cmp+0x46>
 20c:	12 16       	cp	r1, r18
 20e:	13 06       	cpc	r1, r19
 210:	e4 07       	cpc	r30, r20
 212:	f5 07       	cpc	r31, r21
 214:	98 f0       	brcs	.+38     	; 0x23c <__fp_cmp+0x46>
 216:	62 1b       	sub	r22, r18
 218:	73 0b       	sbc	r23, r19
 21a:	84 0b       	sbc	r24, r20
 21c:	95 0b       	sbc	r25, r21
 21e:	39 f4       	brne	.+14     	; 0x22e <__fp_cmp+0x38>
 220:	0a 26       	eor	r0, r26
 222:	61 f0       	breq	.+24     	; 0x23c <__fp_cmp+0x46>
 224:	23 2b       	or	r18, r19
 226:	24 2b       	or	r18, r20
 228:	25 2b       	or	r18, r21
 22a:	21 f4       	brne	.+8      	; 0x234 <__fp_cmp+0x3e>
 22c:	08 95       	ret
 22e:	0a 26       	eor	r0, r26
 230:	09 f4       	brne	.+2      	; 0x234 <__fp_cmp+0x3e>
 232:	a1 40       	sbci	r26, 0x01	; 1
 234:	a6 95       	lsr	r26
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	81 1d       	adc	r24, r1
 23a:	81 1d       	adc	r24, r1
 23c:	08 95       	ret

0000023e <__gesf2>:
 23e:	db df       	rcall	.-74     	; 0x1f6 <__fp_cmp>
 240:	08 f4       	brcc	.+2      	; 0x244 <__gesf2+0x6>
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	08 95       	ret

00000246 <__mulsf3>:
 246:	0b d0       	rcall	.+22     	; 0x25e <__mulsf3x>
 248:	78 c0       	rjmp	.+240    	; 0x33a <__fp_round>
 24a:	69 d0       	rcall	.+210    	; 0x31e <__fp_pscA>
 24c:	28 f0       	brcs	.+10     	; 0x258 <__mulsf3+0x12>
 24e:	6e d0       	rcall	.+220    	; 0x32c <__fp_pscB>
 250:	18 f0       	brcs	.+6      	; 0x258 <__mulsf3+0x12>
 252:	95 23       	and	r25, r21
 254:	09 f0       	breq	.+2      	; 0x258 <__mulsf3+0x12>
 256:	5a c0       	rjmp	.+180    	; 0x30c <__fp_inf>
 258:	5f c0       	rjmp	.+190    	; 0x318 <__fp_nan>
 25a:	11 24       	eor	r1, r1
 25c:	a2 c0       	rjmp	.+324    	; 0x3a2 <__fp_szero>

0000025e <__mulsf3x>:
 25e:	7e d0       	rcall	.+252    	; 0x35c <__fp_split3>
 260:	a0 f3       	brcs	.-24     	; 0x24a <__mulsf3+0x4>

00000262 <__mulsf3_pse>:
 262:	95 9f       	mul	r25, r21
 264:	d1 f3       	breq	.-12     	; 0x25a <__mulsf3+0x14>
 266:	95 0f       	add	r25, r21
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	55 1f       	adc	r21, r21
 26c:	62 9f       	mul	r22, r18
 26e:	f0 01       	movw	r30, r0
 270:	72 9f       	mul	r23, r18
 272:	bb 27       	eor	r27, r27
 274:	f0 0d       	add	r31, r0
 276:	b1 1d       	adc	r27, r1
 278:	63 9f       	mul	r22, r19
 27a:	aa 27       	eor	r26, r26
 27c:	f0 0d       	add	r31, r0
 27e:	b1 1d       	adc	r27, r1
 280:	aa 1f       	adc	r26, r26
 282:	64 9f       	mul	r22, r20
 284:	66 27       	eor	r22, r22
 286:	b0 0d       	add	r27, r0
 288:	a1 1d       	adc	r26, r1
 28a:	66 1f       	adc	r22, r22
 28c:	82 9f       	mul	r24, r18
 28e:	22 27       	eor	r18, r18
 290:	b0 0d       	add	r27, r0
 292:	a1 1d       	adc	r26, r1
 294:	62 1f       	adc	r22, r18
 296:	73 9f       	mul	r23, r19
 298:	b0 0d       	add	r27, r0
 29a:	a1 1d       	adc	r26, r1
 29c:	62 1f       	adc	r22, r18
 29e:	83 9f       	mul	r24, r19
 2a0:	a0 0d       	add	r26, r0
 2a2:	61 1d       	adc	r22, r1
 2a4:	22 1f       	adc	r18, r18
 2a6:	74 9f       	mul	r23, r20
 2a8:	33 27       	eor	r19, r19
 2aa:	a0 0d       	add	r26, r0
 2ac:	61 1d       	adc	r22, r1
 2ae:	23 1f       	adc	r18, r19
 2b0:	84 9f       	mul	r24, r20
 2b2:	60 0d       	add	r22, r0
 2b4:	21 1d       	adc	r18, r1
 2b6:	82 2f       	mov	r24, r18
 2b8:	76 2f       	mov	r23, r22
 2ba:	6a 2f       	mov	r22, r26
 2bc:	11 24       	eor	r1, r1
 2be:	9f 57       	subi	r25, 0x7F	; 127
 2c0:	50 40       	sbci	r21, 0x00	; 0
 2c2:	8a f0       	brmi	.+34     	; 0x2e6 <__mulsf3_pse+0x84>
 2c4:	e1 f0       	breq	.+56     	; 0x2fe <__mulsf3_pse+0x9c>
 2c6:	88 23       	and	r24, r24
 2c8:	4a f0       	brmi	.+18     	; 0x2dc <__mulsf3_pse+0x7a>
 2ca:	ee 0f       	add	r30, r30
 2cc:	ff 1f       	adc	r31, r31
 2ce:	bb 1f       	adc	r27, r27
 2d0:	66 1f       	adc	r22, r22
 2d2:	77 1f       	adc	r23, r23
 2d4:	88 1f       	adc	r24, r24
 2d6:	91 50       	subi	r25, 0x01	; 1
 2d8:	50 40       	sbci	r21, 0x00	; 0
 2da:	a9 f7       	brne	.-22     	; 0x2c6 <__mulsf3_pse+0x64>
 2dc:	9e 3f       	cpi	r25, 0xFE	; 254
 2de:	51 05       	cpc	r21, r1
 2e0:	70 f0       	brcs	.+28     	; 0x2fe <__mulsf3_pse+0x9c>
 2e2:	14 c0       	rjmp	.+40     	; 0x30c <__fp_inf>
 2e4:	5e c0       	rjmp	.+188    	; 0x3a2 <__fp_szero>
 2e6:	5f 3f       	cpi	r21, 0xFF	; 255
 2e8:	ec f3       	brlt	.-6      	; 0x2e4 <__mulsf3_pse+0x82>
 2ea:	98 3e       	cpi	r25, 0xE8	; 232
 2ec:	dc f3       	brlt	.-10     	; 0x2e4 <__mulsf3_pse+0x82>
 2ee:	86 95       	lsr	r24
 2f0:	77 95       	ror	r23
 2f2:	67 95       	ror	r22
 2f4:	b7 95       	ror	r27
 2f6:	f7 95       	ror	r31
 2f8:	e7 95       	ror	r30
 2fa:	9f 5f       	subi	r25, 0xFF	; 255
 2fc:	c1 f7       	brne	.-16     	; 0x2ee <__mulsf3_pse+0x8c>
 2fe:	fe 2b       	or	r31, r30
 300:	88 0f       	add	r24, r24
 302:	91 1d       	adc	r25, r1
 304:	96 95       	lsr	r25
 306:	87 95       	ror	r24
 308:	97 f9       	bld	r25, 7
 30a:	08 95       	ret

0000030c <__fp_inf>:
 30c:	97 f9       	bld	r25, 7
 30e:	9f 67       	ori	r25, 0x7F	; 127
 310:	80 e8       	ldi	r24, 0x80	; 128
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	08 95       	ret

00000318 <__fp_nan>:
 318:	9f ef       	ldi	r25, 0xFF	; 255
 31a:	80 ec       	ldi	r24, 0xC0	; 192
 31c:	08 95       	ret

0000031e <__fp_pscA>:
 31e:	00 24       	eor	r0, r0
 320:	0a 94       	dec	r0
 322:	16 16       	cp	r1, r22
 324:	17 06       	cpc	r1, r23
 326:	18 06       	cpc	r1, r24
 328:	09 06       	cpc	r0, r25
 32a:	08 95       	ret

0000032c <__fp_pscB>:
 32c:	00 24       	eor	r0, r0
 32e:	0a 94       	dec	r0
 330:	12 16       	cp	r1, r18
 332:	13 06       	cpc	r1, r19
 334:	14 06       	cpc	r1, r20
 336:	05 06       	cpc	r0, r21
 338:	08 95       	ret

0000033a <__fp_round>:
 33a:	09 2e       	mov	r0, r25
 33c:	03 94       	inc	r0
 33e:	00 0c       	add	r0, r0
 340:	11 f4       	brne	.+4      	; 0x346 <__fp_round+0xc>
 342:	88 23       	and	r24, r24
 344:	52 f0       	brmi	.+20     	; 0x35a <__fp_round+0x20>
 346:	bb 0f       	add	r27, r27
 348:	40 f4       	brcc	.+16     	; 0x35a <__fp_round+0x20>
 34a:	bf 2b       	or	r27, r31
 34c:	11 f4       	brne	.+4      	; 0x352 <__fp_round+0x18>
 34e:	60 ff       	sbrs	r22, 0
 350:	04 c0       	rjmp	.+8      	; 0x35a <__fp_round+0x20>
 352:	6f 5f       	subi	r22, 0xFF	; 255
 354:	7f 4f       	sbci	r23, 0xFF	; 255
 356:	8f 4f       	sbci	r24, 0xFF	; 255
 358:	9f 4f       	sbci	r25, 0xFF	; 255
 35a:	08 95       	ret

0000035c <__fp_split3>:
 35c:	57 fd       	sbrc	r21, 7
 35e:	90 58       	subi	r25, 0x80	; 128
 360:	44 0f       	add	r20, r20
 362:	55 1f       	adc	r21, r21
 364:	59 f0       	breq	.+22     	; 0x37c <__fp_splitA+0x10>
 366:	5f 3f       	cpi	r21, 0xFF	; 255
 368:	71 f0       	breq	.+28     	; 0x386 <__fp_splitA+0x1a>
 36a:	47 95       	ror	r20

0000036c <__fp_splitA>:
 36c:	88 0f       	add	r24, r24
 36e:	97 fb       	bst	r25, 7
 370:	99 1f       	adc	r25, r25
 372:	61 f0       	breq	.+24     	; 0x38c <__fp_splitA+0x20>
 374:	9f 3f       	cpi	r25, 0xFF	; 255
 376:	79 f0       	breq	.+30     	; 0x396 <__fp_splitA+0x2a>
 378:	87 95       	ror	r24
 37a:	08 95       	ret
 37c:	12 16       	cp	r1, r18
 37e:	13 06       	cpc	r1, r19
 380:	14 06       	cpc	r1, r20
 382:	55 1f       	adc	r21, r21
 384:	f2 cf       	rjmp	.-28     	; 0x36a <__fp_split3+0xe>
 386:	46 95       	lsr	r20
 388:	f1 df       	rcall	.-30     	; 0x36c <__fp_splitA>
 38a:	08 c0       	rjmp	.+16     	; 0x39c <__fp_splitA+0x30>
 38c:	16 16       	cp	r1, r22
 38e:	17 06       	cpc	r1, r23
 390:	18 06       	cpc	r1, r24
 392:	99 1f       	adc	r25, r25
 394:	f1 cf       	rjmp	.-30     	; 0x378 <__fp_splitA+0xc>
 396:	86 95       	lsr	r24
 398:	71 05       	cpc	r23, r1
 39a:	61 05       	cpc	r22, r1
 39c:	08 94       	sec
 39e:	08 95       	ret

000003a0 <__fp_zero>:
 3a0:	e8 94       	clt

000003a2 <__fp_szero>:
 3a2:	bb 27       	eor	r27, r27
 3a4:	66 27       	eor	r22, r22
 3a6:	77 27       	eor	r23, r23
 3a8:	cb 01       	movw	r24, r22
 3aa:	97 f9       	bld	r25, 7
 3ac:	08 95       	ret

000003ae <_exit>:
 3ae:	f8 94       	cli

000003b0 <__stop_program>:
 3b0:	ff cf       	rjmp	.-2      	; 0x3b0 <__stop_program>
