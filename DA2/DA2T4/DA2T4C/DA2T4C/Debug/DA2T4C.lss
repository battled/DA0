
DA2T4C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000136  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001ca  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000092f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000155  00000000  00000000  00000986  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000f9  00000000  00000000  00000adb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001a7  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000048  00000000  00000000  00000d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000101  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000049  00000000  00000000  00000ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00000f0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 80 00 	call	0x100	; 0x100 <main>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_4>:
#include <util/delay.h>
#include <avr/interrupt.h>
//stack auto initialized in C

ISR(PCINT1_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25

	static int i=0; //declare i as static int to prevent re-initialization every interrupt
	//enter if statement if pc0 == 1
	if ( (PORTC ==0X01 ) || (PORTC == 0X11 ) || (PORTC == 0X21) || (PORTC == 0X31))
  9e:	88 b1       	in	r24, 0x08	; 8
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	49 f0       	breq	.+18     	; 0xb6 <__vector_4+0x26>
  a4:	88 b1       	in	r24, 0x08	; 8
  a6:	81 31       	cpi	r24, 0x11	; 17
  a8:	31 f0       	breq	.+12     	; 0xb6 <__vector_4+0x26>
  aa:	88 b1       	in	r24, 0x08	; 8
  ac:	81 32       	cpi	r24, 0x21	; 33
  ae:	19 f0       	breq	.+6      	; 0xb6 <__vector_4+0x26>
  b0:	88 b1       	in	r24, 0x08	; 8
  b2:	81 33       	cpi	r24, 0x31	; 49
  b4:	f1 f4       	brne	.+60     	; 0xf2 <__vector_4+0x62>
{
	PORTB++;
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	8f 5f       	subi	r24, 0xFF	; 255
  ba:	85 b9       	out	0x05, r24	; 5
	i++;
  bc:	80 91 00 01 	lds	r24, 0x0100
  c0:	90 91 01 01 	lds	r25, 0x0101
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	90 93 01 01 	sts	0x0101, r25
  ca:	80 93 00 01 	sts	0x0100, r24
	if (i==5)
  ce:	85 30       	cpi	r24, 0x05	; 5
  d0:	91 05       	cpc	r25, r1
  d2:	29 f4       	brne	.+10     	; 0xde <__vector_4+0x4e>
	PORTC ^= (1<<PC4); //(0x10);	//flip portc4
  d4:	98 b1       	in	r25, 0x08	; 8
  d6:	80 e1       	ldi	r24, 0x10	; 16
  d8:	89 27       	eor	r24, r25
  da:	88 b9       	out	0x08, r24	; 8
  dc:	0a c0       	rjmp	.+20     	; 0xf2 <__vector_4+0x62>
	else if (i ==10)
  de:	0a 97       	sbiw	r24, 0x0a	; 10
  e0:	41 f4       	brne	.+16     	; 0xf2 <__vector_4+0x62>
	{
		PORTC ^= (1<<PC4)|(1<<PC5); //0x30; flip portc4,5 reinit i
  e2:	98 b1       	in	r25, 0x08	; 8
  e4:	80 e3       	ldi	r24, 0x30	; 48
  e6:	89 27       	eor	r24, r25
  e8:	88 b9       	out	0x08, r24	; 8
		i = 0;
  ea:	10 92 01 01 	sts	0x0101, r1
  ee:	10 92 00 01 	sts	0x0100, r1
	}
}
}
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <main>:

int main(void)
{
    while(1)
    {
		PCICR = 1 << PCIE1;		//enable pcint1
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	80 93 68 00 	sts	0x0068, r24
		PCMSK1 =1 << PCINT8;	//enable pcint8 to allow pc0 to trigger interrupt (set flag)
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 6c 00 	sts	0x006C, r24
		sei();
 10c:	78 94       	sei
		DDRB = 0XFF; //MAKE PORT B OUTPUT FOR COUNTING
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	84 b9       	out	0x04, r24	; 4
		DDRC = 0X31; //MAKE PC5, PC4, PC0 OUTPUTS
 112:	81 e3       	ldi	r24, 0x31	; 49
 114:	87 b9       	out	0x07, r24	; 7
		while (1)
		{
			_delay_ms(250);
			PORTC ^= (1<<PC0);
 116:	91 e0       	ldi	r25, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	2f e7       	ldi	r18, 0x7F	; 127
 11a:	3a e1       	ldi	r19, 0x1A	; 26
 11c:	86 e0       	ldi	r24, 0x06	; 6
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	30 40       	sbci	r19, 0x00	; 0
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x1e>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x28>
 128:	00 00       	nop
 12a:	88 b1       	in	r24, 0x08	; 8
 12c:	89 27       	eor	r24, r25
 12e:	88 b9       	out	0x08, r24	; 8
 130:	f3 cf       	rjmp	.-26     	; 0x118 <main+0x18>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
