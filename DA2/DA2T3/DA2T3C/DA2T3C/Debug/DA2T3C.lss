
DA2T3C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000f0  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008c7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000008f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000138  00000000  00000000  00000916  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000df  00000000  00000000  00000a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000192  00000000  00000000  00000b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000f6  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000030  00000000  00000000  00000dda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00000e0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
//stack auto initialized in C

int main(void)
{
		int i=0;		//used to control port 9 and 10
		DDRB = 0XFF; //MAKE PORT B OUTPUT FOR COUNTING
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
		DDRC = 0X31; //MAKE PC5, PC4, PC0 OUTPUTS
  84:	81 e3       	ldi	r24, 0x31	; 49
  86:	87 b9       	out	0x07, r24	; 7
#include <util/delay.h>
//stack auto initialized in C

int main(void)
{
		int i=0;		//used to control port 9 and 10
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	90 e0       	ldi	r25, 0x00	; 0
		DDRB = 0XFF; //MAKE PORT B OUTPUT FOR COUNTING
		DDRC = 0X31; //MAKE PC5, PC4, PC0 OUTPUTS
		while (1)
		{
			_delay_ms(250);
			PORTC ^= (1<<PC0);
  8c:	51 e0       	ldi	r21, 0x01	; 1
				i++;
				if (i==5)
					PORTC ^= (1<<PC4); //(0x10); flip portc4
				else if (i ==10)
				{
					PORTC ^= (1<<PC4)|(1<<PC5); //0x30 flip portc4,5
  8e:	70 e3       	ldi	r23, 0x30	; 48
					i = 0;
  90:	20 e0       	ldi	r18, 0x00	; 0
  92:	30 e0       	ldi	r19, 0x00	; 0
			if ( (PORTC ==0X01 ) || (PORTC == 0X11 ) || (PORTC == 0X21) || (PORTC == 0X31)) 
			{
				PORTB++;
				i++;
				if (i==5)
					PORTC ^= (1<<PC4); //(0x10); flip portc4
  94:	60 e1       	ldi	r22, 0x10	; 16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	4f e7       	ldi	r20, 0x7F	; 127
  98:	ea e1       	ldi	r30, 0x1A	; 26
  9a:	f6 e0       	ldi	r31, 0x06	; 6
  9c:	41 50       	subi	r20, 0x01	; 1
  9e:	e0 40       	sbci	r30, 0x00	; 0
  a0:	f0 40       	sbci	r31, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x1c>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x26>
  a6:	00 00       	nop
		DDRB = 0XFF; //MAKE PORT B OUTPUT FOR COUNTING
		DDRC = 0X31; //MAKE PC5, PC4, PC0 OUTPUTS
		while (1)
		{
			_delay_ms(250);
			PORTC ^= (1<<PC0);
  a8:	48 b1       	in	r20, 0x08	; 8
  aa:	45 27       	eor	r20, r21
  ac:	48 b9       	out	0x08, r20	; 8
			//must account for each state portc may be in due to flipping of bits portc4,5
			if ( (PORTC ==0X01 ) || (PORTC == 0X11 ) || (PORTC == 0X21) || (PORTC == 0X31)) 
  ae:	48 b1       	in	r20, 0x08	; 8
  b0:	41 30       	cpi	r20, 0x01	; 1
  b2:	49 f0       	breq	.+18     	; 0xc6 <main+0x46>
  b4:	48 b1       	in	r20, 0x08	; 8
  b6:	41 31       	cpi	r20, 0x11	; 17
  b8:	31 f0       	breq	.+12     	; 0xc6 <main+0x46>
  ba:	48 b1       	in	r20, 0x08	; 8
  bc:	41 32       	cpi	r20, 0x21	; 33
  be:	19 f0       	breq	.+6      	; 0xc6 <main+0x46>
  c0:	48 b1       	in	r20, 0x08	; 8
  c2:	41 33       	cpi	r20, 0x31	; 49
  c4:	41 f7       	brne	.-48     	; 0x96 <main+0x16>
			{
				PORTB++;
  c6:	45 b1       	in	r20, 0x05	; 5
  c8:	4f 5f       	subi	r20, 0xFF	; 255
  ca:	45 b9       	out	0x05, r20	; 5
				i++;
  cc:	01 96       	adiw	r24, 0x01	; 1
				if (i==5)
  ce:	85 30       	cpi	r24, 0x05	; 5
  d0:	91 05       	cpc	r25, r1
  d2:	21 f4       	brne	.+8      	; 0xdc <main+0x5c>
					PORTC ^= (1<<PC4); //(0x10); flip portc4
  d4:	48 b1       	in	r20, 0x08	; 8
  d6:	46 27       	eor	r20, r22
  d8:	48 b9       	out	0x08, r20	; 8
  da:	dd cf       	rjmp	.-70     	; 0x96 <main+0x16>
				else if (i ==10)
  dc:	8a 30       	cpi	r24, 0x0A	; 10
  de:	91 05       	cpc	r25, r1
  e0:	d1 f6       	brne	.-76     	; 0x96 <main+0x16>
				{
					PORTC ^= (1<<PC4)|(1<<PC5); //0x30 flip portc4,5
  e2:	88 b1       	in	r24, 0x08	; 8
  e4:	87 27       	eor	r24, r23
  e6:	88 b9       	out	0x08, r24	; 8
					i = 0;
  e8:	c9 01       	movw	r24, r18
  ea:	d5 cf       	rjmp	.-86     	; 0x96 <main+0x16>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
